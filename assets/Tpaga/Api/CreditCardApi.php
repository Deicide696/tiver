<?php
/**
 * CreditCardApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TPaga API
 *
 * TPaga Payment Gateway API  [Learn about TPaga](https://tpaga.co)  TPaga uses an REST API with the following workflow: # Setup Create a user for yourself (your commerce) and obtain your private and public `api_key`s.  For testing purposes you can use the following API key tokens in the [sandbox environment](https://sandbox.tpaga.co/):    1. Public key token: `pk_test_qvbvuthlvqpijnr0elmtg5jh`.   1. Private key token: `d13fr8n7vhvkuch3lq2ds5qhjnd2pdd2`.  # How to authenticate yourself using the API key tokens  ## When should you use each token We provide you with two API tokens: a public one, and a private one.  For most of the requests to our API, you have to use the private token. You can only use the public token when performing requests to the credit card tokenization endpoint (<a href=\"#!/Credit_Card/tokenizeCreditCard\" target=\"_blank\">/tokenize/credit_card</a>).  ## How to use the token in your requests  To authenticate yourself using a token in your request, you must add it as an `HTTP Basic` authentication header, with an empty password.  This header is built as follows:    1. Take the token string (e.g., `d13fr8n7vhvkuch3lq2ds5qhjnd2pdd2`, the      private key token above), and concatenate it with the password (an      empty string), separated with the colon (`:`) character. In this      example, you would get `d13fr8n7vhvkuch3lq2ds5qhjnd2pdd2:`.   1. Encode that string using Base64. In our example, you would get the      following: `ZDEzZnI4bjd2aHZrdWNoM2xxMmRzNXFoam5kMnBkZDI6`   1. The header **name** is: `Authorization`, and its **content** will be (in this      example) `Basic ZDEzZnI4bjd2aHZrdWNoM2xxMmRzNXFoam5kMnBkZDI6`. In other      words, you have to add the following to your request headers:            Authorization: Basic ZDEzZnI4bjd2aHZrdWNoM2xxMmRzNXFoam5kMnBkZDI6       See also https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side  # Charging a customer using a credit card   2. Using your private key token, create a `Customer` entity, representing      one of your customers.      There are no mandatory fields, but it's highly recommended that you      provide as many fields as possible.       **API endpoint**: <a href=\"#!/Customer/createCustomer\" target=\"_blank\">/customer</a>.   3. Using your **public** key token, *tokenize* the credit card information of your customer .       **API endpoint**: <a href=\"#!/Credit_Card/tokenizeCreditCard\" target=\"_blank\">/tokenize/credit_card</a>.   3. Using your private key token, create a payment method for your      customer, by associating the credit card you have tokenized with the      customer.       **API endpoint**: <a href=\"#!/Credit_Card/addCreditCardToken\" target=\"_blank\">/customer/{customer_id}/credit_card_token</a>.   4. Using your private key token, perform a `Charge` with the payment method associated to the `Customer`.       **API endpoint**: <a href=\"#!/Charge/addCreditCardCharge\" target=\"_blank\">/charge/credit_card</a>.
 *
 * OpenAPI spec version: 0.4.5
 * Contact: sortiz@tpaga.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace app\assets\Tpaga\Api;

use app\assets\Tpaga\Configuration;
use app\assets\Tpaga\ApiClient;
use app\assets\Tpaga\ApiException;
use app\assets\Tpaga\ObjectSerializer;

/**
 * CreditCardApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardApi
{

    /**
     * API Client
     *
     * @var \app\assets\Tpaga\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \app\assets\Tpaga\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\app\assets\Tpaga\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://sandbox.tpaga.co/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \app\assets\Tpaga\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \app\assets\Tpaga\ApiClient $apiClient set the API client
     *
     * @return CreditCardApi
     */
    public function setApiClient(\app\assets\Tpaga\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addCreditCardCharge
     *
     * Adds a new CreditCardCharge to Customer's CreditCard.
     *
     * @param \app\assets\Tpaga\Model\CreditCardCharge $body The &#x60;CreditCardCharge&#x60; object to be generated to a &#x60;CreditCard&#x60; it has the following fields. - **creditCard** which is the identifier of the &#x60;CreditCard&#x60; to be charged. - **customer** which is the id of the &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60;. - **amount** which is the full amount of the charge. - **currency** its the 3-letter ISO code for the currency. - **installments** its the amount of payments to divide the charge amount, it can be minimum 1 maximum 36. - **taxAmount** the amount that accounts as taxes. - **paid** its the status of the charge. true if its paid, false if its not. - **description** which is the description of the charge being made. - **orderId** commerce order identifier. - **thirdPartyId** commerce third party tax identification. - **iacAmount** consumption tax amount (Impuesto al consumo). - **tipAmount** voluntary tip amount. (required)
     *
     * @return \app\assets\Tpaga\Model\CreditCardCharge
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function addCreditCardCharge($body)
    {
        list($response) = $this->addCreditCardChargeWithHttpInfo($body);
        return $response;
    }


    /**
     * Operation addCreditCardChargeWithHttpInfo
     *
     * Adds a new CreditCardCharge to Customer's CreditCard.
     *
     * @param \app\assets\Tpaga\Model\CreditCardCharge $body The &#x60;CreditCardCharge&#x60; object to be generated to a &#x60;CreditCard&#x60; it has the following fields. - **creditCard** which is the identifier of the &#x60;CreditCard&#x60; to be charged. - **customer** which is the id of the &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60;. - **amount** which is the full amount of the charge. - **currency** its the 3-letter ISO code for the currency. - **installments** its the amount of payments to divide the charge amount, it can be minimum 1 maximum 36. - **taxAmount** the amount that accounts as taxes. - **paid** its the status of the charge. true if its paid, false if its not. - **description** which is the description of the charge being made. - **orderId** commerce order identifier. - **thirdPartyId** commerce third party tax identification. - **iacAmount** consumption tax amount (Impuesto al consumo). - **tipAmount** voluntary tip amount. (required)
     *
     * @return Array of \app\assets\Tpaga\Model\CreditCardCharge, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function addCreditCardChargeWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addCreditCardCharge');
        }

        // parse inputs
        $resourcePath = "/charge/credit_card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\app\assets\Tpaga\Model\CreditCardCharge'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\app\assets\Tpaga\Model\CreditCardCharge', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCardCharge', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCardCharge', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation addCreditCardToken
     *
     * Adds a new Credit Card payment method to the Customer.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; to associate the new &#x60;CreditCard&#x60; (required)
     * @param \app\assets\Tpaga\Model\Token $body The &#x60;Token&#x60; object which represents the &#x60;CreditCard&#x60; to be associated to the &#x60;Customer&#x60; - **token** the identification of the token which represents the &#x60;CreditCard&#x60;. (required)
     *
     * @return \app\assets\Tpaga\Model\CreditCard
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function addCreditCardToken($customer_id, $body)
    {
        list($response) = $this->addCreditCardTokenWithHttpInfo($customer_id, $body);
        return $response;
    }


    /**
     * Operation addCreditCardTokenWithHttpInfo
     *
     * Adds a new Credit Card payment method to the Customer.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; to associate the new &#x60;CreditCard&#x60; (required)
     * @param \app\assets\Tpaga\Model\Token $body The &#x60;Token&#x60; object which represents the &#x60;CreditCard&#x60; to be associated to the &#x60;Customer&#x60; - **token** the identification of the token which represents the &#x60;CreditCard&#x60;. (required)
     *
     * @return Array of \app\assets\Tpaga\Model\CreditCard, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function addCreditCardTokenWithHttpInfo($customer_id, $body)
    {
        
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling addCreditCardToken');
        }
        if (!preg_match("(\\w{32})", $customer_id)) {
            throw new \InvalidArgumentException('invalid value for "customer_id" when calling CreditCardApi.addCreditCardToken, must conform to the pattern (\\w{32}).');
        }


        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addCreditCardToken');
        }

        // parse inputs
        $resourcePath = "/customer/{customer_id}/credit_card_token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\app\assets\Tpaga\Model\CreditCard'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\app\assets\Tpaga\Model\CreditCard', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCard', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation deleteCreditCardById
     *
     * Deletes a CreditCard by ID.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60; (required)
     * @param string $card_id Identification of &#x60;CreditCard&#x60; to be deleted (required)
     *
     * @return void
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function deleteCreditCardById($customer_id, $card_id)
    {
        list($response) = $this->deleteCreditCardByIdWithHttpInfo($customer_id, $card_id);
        return $response;
    }


    /**
     * Operation deleteCreditCardByIdWithHttpInfo
     *
     * Deletes a CreditCard by ID.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60; (required)
     * @param string $card_id Identification of &#x60;CreditCard&#x60; to be deleted (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function deleteCreditCardByIdWithHttpInfo($customer_id, $card_id)
    {
        
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling deleteCreditCardById');
        }
        if (!preg_match("(\\w{32})", $customer_id)) {
            throw new \InvalidArgumentException('invalid value for "customer_id" when calling CreditCardApi.deleteCreditCardById, must conform to the pattern (\\w{32}).');
        }


        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling deleteCreditCardById');
        }
        if (!preg_match("(\\w{32})", $card_id)) {
            throw new \InvalidArgumentException('invalid value for "card_id" when calling CreditCardApi.deleteCreditCardById, must conform to the pattern (\\w{32}).');
        }


        // parse inputs
        $resourcePath = "/customer/{customer_id}/credit_card/{card_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                "{" . "card_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getCreditCardById
     *
     * Retrieve a CreditCard by ID.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60; (required)
     * @param string $card_id Identification of &#x60;CreditCard&#x60; that needs to be retrieved (required)
     *
     * @return \app\assets\Tpaga\Model\CreditCard
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function getCreditCardById($customer_id, $card_id)
    {
        list($response) = $this->getCreditCardByIdWithHttpInfo($customer_id, $card_id);
        return $response;
    }


    /**
     * Operation getCreditCardByIdWithHttpInfo
     *
     * Retrieve a CreditCard by ID.
     *
     * @param string $customer_id Identification of &#x60;Customer&#x60; associated with the &#x60;CreditCard&#x60; (required)
     * @param string $card_id Identification of &#x60;CreditCard&#x60; that needs to be retrieved (required)
     *
     * @return Array of \app\assets\Tpaga\Model\CreditCard, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function getCreditCardByIdWithHttpInfo($customer_id, $card_id)
    {
        
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling getCreditCardById');
        }
        if (!preg_match("(\\w{32})", $customer_id)) {
            throw new \InvalidArgumentException('invalid value for "customer_id" when calling CreditCardApi.getCreditCardById, must conform to the pattern (\\w{32}).');
        }


        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getCreditCardById');
        }
        if (!preg_match("(\\w{32})", $card_id)) {
            throw new \InvalidArgumentException('invalid value for "card_id" when calling CreditCardApi.getCreditCardById, must conform to the pattern (\\w{32}).');
        }


        // parse inputs
        $resourcePath = "/customer/{customer_id}/credit_card/{card_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                "{" . "card_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\app\assets\Tpaga\Model\CreditCard'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\app\assets\Tpaga\Model\CreditCard', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCard', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation refundCreditCardCharge
     *
     * Try to refund a CreditCardCharge to a Customer's CreditCard.
     *
     * @param \app\assets\Tpaga\Model\CreditCardRefund $body - **id** It is the id of the &#x60;CreditCardCharge&#x60; thats going to be refunded. (required)
     *
     * @return \app\assets\Tpaga\Model\CreditCardCharge
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function refundCreditCardCharge($body)
    {
        list($response) = $this->refundCreditCardChargeWithHttpInfo($body);
        return $response;
    }


    /**
     * Operation refundCreditCardChargeWithHttpInfo
     *
     * Try to refund a CreditCardCharge to a Customer's CreditCard.
     *
     * @param \app\assets\Tpaga\Model\CreditCardRefund $body - **id** It is the id of the &#x60;CreditCardCharge&#x60; thats going to be refunded. (required)
     *
     * @return Array of \app\assets\Tpaga\Model\CreditCardCharge, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function refundCreditCardChargeWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling refundCreditCardCharge');
        }

        // parse inputs
        $resourcePath = "/refund/credit_card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\app\assets\Tpaga\Model\CreditCardCharge'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\app\assets\Tpaga\Model\CreditCardCharge', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCardCharge', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\CreditCardCharge', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation tokenizeCreditCard
     *
     * Creates a new token for a Credit Card.
     *
     * @param \app\assets\Tpaga\Model\CreditCardToken $body The &#x60;CreditCardToken&#x60; object to be tokenized - **primaryAccountNumber** which is the number as it appears on the credit card. - **cvc** which is the security code usually found in the back of the credit card. - **expirationMonth** which is the month of expiration of the credit card, its entered as a numeric value with single digits or double digits, e.g., 5 or 05 to represent May. - **expirationYear** which is the year of expiration of the credit card in its complete numeric value. - **cardHolderName** which is the name of the card holder exactly as it appears on the credit card. (required)
     *
     * @return \app\assets\Tpaga\Model\Token
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function tokenizeCreditCard($body)
    {
        list($response) = $this->tokenizeCreditCardWithHttpInfo($body);
        return $response;
    }


    /**
     * Operation tokenizeCreditCardWithHttpInfo
     *
     * Creates a new token for a Credit Card.
     *
     * @param \app\assets\Tpaga\Model\CreditCardToken $body The &#x60;CreditCardToken&#x60; object to be tokenized - **primaryAccountNumber** which is the number as it appears on the credit card. - **cvc** which is the security code usually found in the back of the credit card. - **expirationMonth** which is the month of expiration of the credit card, its entered as a numeric value with single digits or double digits, e.g., 5 or 05 to represent May. - **expirationYear** which is the year of expiration of the credit card in its complete numeric value. - **cardHolderName** which is the name of the card holder exactly as it appears on the credit card. (required)
     *
     * @return Array of \app\assets\Tpaga\Model\Token, HTTP status code, HTTP response headers (array of strings)
     * @throws \app\assets\Tpaga\ApiException on non-2xx response
     */
    public function tokenizeCreditCardWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling tokenizeCreditCard');
        }

        // parse inputs
        $resourcePath = "/tokenize/credit_card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\app\assets\Tpaga\Model\Token'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\app\assets\Tpaga\Model\Token', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\Token', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\app\assets\Tpaga\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
